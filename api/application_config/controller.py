"""
    Author: Do Quoc Vuong
    Email: vuongtlt13@gmail.com
    Country: VietNam
    Generated by VGenerator
    Created at: 2021-06-15 10:23:12.532712Z
"""

from typing import Dict
from flask import request
from api.core import BaseController, constants, utils
from api.application_config.repository import ApplicationConfigRepository


class ApplicationConfigController(BaseController):
    def __init__(self):
        super().__init__()
        self.application_config_repository = ApplicationConfigRepository()

    def get(self, _id=None):
        if _id is not None:
            application_config = self.application_config_repository.find_by_id(_id)
            if application_config:
                application_config = application_config.as_dict()
            return self.success(data=application_config)

        args = request.args.to_dict()
        page = int(args.get('page', constants.DEFAULT_PAGE))
        size = int(args.get('size', constants.DEFAULT_PAGE_SIZE))
        application_configs = self.application_config_repository.get(page=page, size=size)
        for index, application_config in enumerate(application_configs):
            application_configs[index] = application_config.as_dict()

        result = utils.paginate_serializer(page=page, size=size, data=application_configs, data_key_name='application_configs')
        return self.success(data=result)

    def create(self, data: Dict):
        new_application_config, errors = self.application_config_repository.create(data=data)
        if errors:
            return self.error(error=errors)

        return self.success(data=new_application_config.as_dict())

    def update(self, _id, data: Dict):

        application_config, errors = self.application_config_repository.update(_id, data=data)
        if errors:
            return self.error(error=errors)

        if application_config:
            application_config = application_config.as_dict()
        return self.success(data=application_config)

    def delete(self, _id):
        self.application_config_repository.delete(_id)
        return self.success(data=[])
